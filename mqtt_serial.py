import serial                      # Importa a biblioteca pySerial para comunica√ß√£o via porta serial (ESP32, Arduino etc.)
import paho.mqtt.client as mqtt     # Importa a biblioteca MQTT para publicar e receber dados via broker MQTT
import time                        # Importa fun√ß√µes de tempo, como sleep()
import json                        # Importa o m√≥dulo para manipula√ß√£o de JSON
import re                          # Importa o m√≥dulo de express√µes regulares para buscar padr√µes em strings

# =================== CONFIG ===================
serial_port = 'COM10'               # Porta serial do seu computador conectada ao ESP32 (ajuste conforme necess√°rio)
baud_rate = 115200                  # Velocidade de comunica√ß√£o serial (deve ser igual √† do ESP32)
broker_address = "broker.hivemq.com" # Endere√ßo do broker MQTT p√∫blico
broker_port = 1883                  # Porta padr√£o do broker MQTT
topic = "iot/sala1/vibracao"       # T√≥pico MQTT onde os dados ser√£o publicados
client_id = "Python-Serial-Publisher" # Identificador √∫nico do cliente MQTT

# =================== CALLBACKS ===================
def on_connect(client, userdata, flags, rc):
    # Fun√ß√£o chamada automaticamente quando o cliente MQTT se conecta ao broker
    if rc == 0:
        print("‚úÖ Conectado ao broker MQTT!")  # rc = 0 significa conex√£o bem-sucedida
    else:
        print(f"‚ùå Falha na conex√£o, c√≥digo: {rc}")  # C√≥digo diferente de 0 indica erro de conex√£o

def on_disconnect(client, userdata, rc):
    # Fun√ß√£o chamada automaticamente quando o cliente MQTT se desconecta do broker
    print("üîå Desconectado do broker MQTT!")

# =================== CLIENTE MQTT ===================
client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv311)  # Cria uma inst√¢ncia do cliente MQTT
client.on_connect = on_connect       # Associa a fun√ß√£o de callback para conex√£o
client.on_disconnect = on_disconnect # Associa a fun√ß√£o de callback para desconex√£o

print("Conectando ao broker...")
client.connect(broker_address, broker_port, 60) # Conecta ao broker MQTT com keepalive de 60s
client.loop_start()              # Inicia o loop em background do MQTT para manter a conex√£o ativa

# =================== LOOP PRINCIPAL ===================
try:
    ser = serial.Serial(serial_port, baud_rate, timeout=1)  # Abre a porta serial com timeout de 1 segundo
    print(f"üì° Porta serial {serial_port} aberta. Lendo dados...")

    while True:   # Loop infinito para leitura cont√≠nua de dados
        if ser.in_waiting > 0:  # Verifica se h√° dados dispon√≠veis na porta serial
            line = ser.readline().decode('utf-8', errors='ignore').strip()  
            # L√™ uma linha da serial, decodifica para string UTF-8 e remove espa√ßos extras

            # Ignora mensagens de boot do ESP32 que n√£o cont√™m dados de vibra√ß√£o
            if not line or "ets " in line or "rst:" in line or "load:" in line or "clock" in line or "SPIWP" in line:
                continue  # Pula para a pr√≥xima itera√ß√£o do loop

            print(f"üìñ Dados recebidos: {line}")  # Mostra os dados recebidos da serial

            # Usa express√£o regular para extrair X, Y, Z e Vibra√ß√£o da linha recebida
            match = re.search(r"X:\s*(-?\d+\.?\d*)\s*\|\s*Y:\s*(-?\d+\.?\d*)\s*\|\s*Z:\s*(-?\d+\.?\d*)\s*\|\s*Vibra√ß√£o:\s*([\d\.]+)", line)
            if match:  # Se o padr√£o for encontrado na linha
                try:
                    x = float(match.group(1))  # Converte o valor do eixo X para float
                    y = float(match.group(2))  # Converte o valor do eixo Y para float
                    z = float(match.group(3))  # Converte o valor do eixo Z para float
                    vibracao = float(match.group(4))  # Converte o valor da vibra√ß√£o para float

                    payload = {          # Cria um dicion√°rio com os dados
                        "X": x,
                        "Y": y,
                        "Z": z,
                        "Vibracao": vibracao
                    }

                    mensagem = json.dumps(payload)  # Converte o dicion√°rio para JSON

                    # Verifica se o cliente MQTT est√° conectado antes de publicar
                    if not client.is_connected():
                        print("üîÅ Tentando reconectar ao broker MQTT...")
                        while not client.is_connected():
                            try:
                                client.reconnect()  # Tenta reconectar
                                time.sleep(2)
                            except:
                                print("‚ö†Ô∏è Aguardando reconex√£o...")
                                time.sleep(3)
                        print("‚úÖ Reconectado ao broker MQTT!")

                    result = client.publish(topic, mensagem, qos=0)  # Publica os dados no t√≥pico MQTT
                    result.wait_for_publish()  # Aguarda a confirma√ß√£o de publica√ß√£o
                    print(f"‚úÖ Dados publicados com sucesso! {mensagem}")

                except Exception as e:  # Captura erros de convers√£o ou publica√ß√£o
                    print(f"‚ö†Ô∏è Erro ao processar linha: {e}")

            else:
                print("‚ö†Ô∏è Formato n√£o reconhecido, ignorado.")  # Linha n√£o corresponde ao formato esperado

        time.sleep(0.1)  # Pequena pausa para n√£o sobrecarregar o loop

except serial.SerialException as e:  # Captura erro na porta serial
    print(f"‚ùå Erro na porta serial: {e}")

except KeyboardInterrupt:  # Captura interrup√ß√£o manual pelo usu√°rio (Ctrl+C)
    print("\nüõë Programa encerrado pelo usu√°rio.")

finally:  # Sempre executado, independente de erro ou interrup√ß√£o
    client.loop_stop()       # Para o loop do MQTT
    client.disconnect()      # Desconecta do broker MQTT
    if 'ser' in locals() and ser.is_open:  # Se a porta serial estiver aberta
        ser.close()          # Fecha a porta serial
    print("üîí Conex√£o MQTT e porta serial fechadas.")  # Confirma encerramento seguro
